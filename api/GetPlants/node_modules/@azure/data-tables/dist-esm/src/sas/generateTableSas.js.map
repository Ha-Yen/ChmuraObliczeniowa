{"version":3,"file":"generateTableSas.js","sourceRoot":"","sources":["../../../src/sas/generateTableSas.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,oBAAoB,EAAsB,MAAM,kBAAkB,CAAC;AAC5E,OAAO,EAAE,6BAA6B,EAAE,MAAM,sBAAsB,CAAC;AACrE,OAAO,EACL,+BAA+B,EAEhC,MAAM,2BAA2B,CAAC;AAEnC;;;;;;;;GAQG;AACH,MAAM,UAAU,gBAAgB,CAC9B,SAAiB,EACjB,UAA8B,EAC9B,UAAmC,EAAE;IAErC,MAAM,EAAE,SAAS,EAAE,WAAW,GAAG,6BAA6B,CAAC,IAAI,CAAC,KAAc,OAAO,EAAhB,IAAI,UAAK,OAAO,EAAnF,4BAAyE,CAAU,CAAC;IAE1F,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;QACrC,MAAM,UAAU,CACd,+FAA+F,CAChG,CAAC;KACH;IAED,IAAI,MAAM,GAAG,SAAS,CAAC;IAEvB,IAAI,MAAM,KAAK,SAAS,EAAE;QACxB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;KAChD;IAED,MAAM,GAAG,GAAG,+BAA+B,CAAC,SAAS,EAAE,UAAU,kBAC/D,SAAS,EAAE,MAAM,EACjB,WAAW,IACR,IAAI,EACP,CAAC,QAAQ,EAAE,CAAC;IAEd,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNamedKeyCredential, NamedKeyCredential } from \"@azure/core-auth\";\nimport { tableSasPermissionsFromString } from \"./tableSasPermisions\";\nimport {\n  generateTableSasQueryParameters,\n  TableSasSignatureValues\n} from \"./tableSasSignatureValues\";\n\n/**\n * Generates a Table Service Shared Access Signature (SAS) URI based on the client properties\n * and parameters passed in. The SAS is signed by the shared key credential of the client.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n *\n * @param options - Optional parameters.\n * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n */\nexport function generateTableSas(\n  tableName: string,\n  credential: NamedKeyCredential,\n  options: TableSasSignatureValues = {}\n): string {\n  const { expiresOn, permissions = tableSasPermissionsFromString(\"rl\"), ...rest } = options;\n\n  if (!isNamedKeyCredential(credential)) {\n    throw RangeError(\n      \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n    );\n  }\n\n  let expiry = expiresOn;\n\n  if (expiry === undefined) {\n    const now = new Date();\n    expiry = new Date(now.getTime() + 3600 * 1000);\n  }\n\n  const sas = generateTableSasQueryParameters(tableName, credential, {\n    expiresOn: expiry,\n    permissions,\n    ...rest\n  }).toString();\n\n  return sas;\n}\n"]}